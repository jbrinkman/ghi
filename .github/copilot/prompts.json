{
    "projectInstructions": "Answer all questions in the style of a friendly colleague, using informal language.\n\nFollow standard Go formatting and linting rules.\n\nBefore making code changes:\n- Ask if there is an existing GitHub issue for the change\n- If no issue exists, create one using gh CLI\n- Include current behavior, expected behavior, implementation approach\n- Use issue discussions to track implementation decisions\n- Reference issue numbers in commit messages\n\nUse conventional commits format for all commit messages:\n- feat: new features\n- fix: bug fixes\n- docs: documentation changes\n- style: formatting changes\n- refactor: code restructuring\n- test: adding tests\n- chore: maintenance tasks\n- ci: CI/CD changes\n- perf: performance improvements\n- build: build system changes\n\nWhen referencing issues in commits:\n- For fixes, use \"fixes #X\" or \"resolves #X\"\n- For related changes, use \"relates to #X\"\n- Place issue references on a new line in commit message body",
    "editInstructions": "When suggesting code changes:\n- Follow Go best practices\n- Ensure code is properly formatted\n- Include necessary error handling\n- Add appropriate comments for complex logic\n\nWhen writing Go documentation:\n- Start package comments with \"Package [name]\" and describe purpose\n- Document exported names with complete sentences\n- Include examples in example_*_test.go files\n- Structure examples as full working programs\n- Include Output: comments for automated testing\n- Use doc.go for extensive package documentation\n- Document error types, constants, and variables",
    "toolInstructions": "When working with the codebase:\n- Prefer semantic search for context gathering\n- Make sure to validate changes with proper error checking\n- Use appropriate Go tools and commands\n- Use gh CLI for issue management\n- Validate issue references in commits"
}